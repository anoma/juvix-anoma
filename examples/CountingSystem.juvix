module CountingSystem;

import Anoma.Transaction open;
import Stdlib.Prelude open;
import Anoma.Extra open;
import Anoma.System open;

open Transaction;
open DeltaComponent;

--- controller private key
privKey : Nat :=
  0xddd315c76991f8e058760cacdd19c21bf6a12c72bc229a60ad6aaa314fa07ac11662fc6e7829efcb0f4500827d49bb699af7b5475cef5220fd600ebbf9709a58;

--- controller public key
pubKey : Nat :=
  0xddd315c76991f8e058760cacdd19c21bf6a12c72bc229a60ad6aaa314fa07ac1;

anomaVerify' {A} (signedData : Nat) (publicKey : Nat) : Bool :=
  anomaVerify {A} signedData publicKey >>> true;

type LabelValue := mkLabelValue {
   controllerPubKey : Nat;
};

countingSystemLogic (self : Resource) (tx : Transaction) : Bool :=
  let
    rs : ResourcePartition := partitionResources tx;
    checkSig : Nat := anomaVerify (Transaction.extra tx) pubKey;
    isCountingSystem (r : Resource) : Bool :=
      anomaKind self == anomaKind r;
    -- TODO: Replace with ray's solution
    consumedRs : List Resource := filter isCountingSystem (ResourcePartition.consumed rs);
    createdRs : List Resource := filter isCountingSystem (ResourcePartition.created rs)
  in case
       consumedRs
         , createdRs
     of
       | [old], [new] :=
         -- TODO: Check that quantity == 1 for every resource
          if
           | Resource.eph old := let
              labelData : LabelValue := anomaDecode (Resource.label new)
              in Resource.data new == 0 && LabelValue.controllerPubKey labelData == pubKey
           | else :=
             Resource.label new == Resource.label old
               && Resource.data new == Resource.data old + 1
       | _ := false;

simpleCounterLogic  (r : Resource) (tx : Transaction) : Bool :=
  let
    rs : ResourcePartition := partitionResources tx;
  in case
       ResourcePartition.consumed rs
         , ResourcePartition.created rs
     of
       -- init case
       | [dummy; oldCountingSystem], [simpleCounter; newCountingSystem] :=
         -- TODO: Refactor logic shared with countingSystemLogic
         Resource.data simpleCounter == 0
         -- TODO: Check that quantity == 1 for every resource
         && Resource.label simpleCounter == Resource.data oldCountingSystem
         && Resource.eph dummy
         && Resource.label dummy == Resource.data oldCountingSystem
         && Resource.label newCountingSystem == Resource.label oldCountingSystem
         && Resource.data newCountingSystem == Resource.data oldCountingSystem + 1
         -- TODO: do signature check
        -- update case
        | [oldSimpleCounter], [newSimpleCounter] :=
             -- TODO: Check that quantity == 1 for every resource
             Resource.label newSimpleCounter == Resource.label oldSimpleCounter
               && Resource.data newSimpleCounter == Resource.data oldSimpleCounter + 1
        | _ := false;

mkCountingSystem (ephemeral : Bool) (n : Nat) : Resource :=
  Resource.mk@{
    logic := countingSystemLogic;
    label := anomaEncode mkLabelValue@{controllerPubKey := pubKey};
    quantity := 1;
    data := n;
    eph := ephemeral;
    npk := pubKey;
    nonce := 0;
    rseed := 0
  };

mkCountingSystemTransaction
  (consumed : Resource)
  (created : Resource)
  : Transaction :=
  Transaction.mk@{
    roots := [];
    commitments := [commitment created];
    nullifiers := [nullifier consumed privKey];
    proofs := [consumed; created];
    delta := [];
    extra := 0;
    preference := 0
  };

countingSystemInit (zeroed : Resource) : Transaction :=
  let dummy : Resource := mkCountingSystem true 666;
      unsignedTx : Transaction := mkCountingSystemTransaction dummy zeroed;
      in
      unsignedTx@Transaction{extra := anomaSign unsignedTx privKey};

countingSystemUpdate (old new : Resource) : Transaction :=
  let unsignedTx : Transaction := mkCountingSystemTransaction old new;
      in
      unsignedTx@Transaction{extra := anomaSign unsignedTx privKey};

main : Transaction := countingSystemUpdate (mkCountingSystem false 0) (mkCountingSystem false 0);
