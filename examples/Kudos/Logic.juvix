{-- Scale-Free Kudos
    https://research.anoma.net/t/scale-free-kudos-brainstorming-thread/217

This module contains the ARMv1 version of the resource logic for kudo,
    adapted from
    https://github.com/anoma/kudos-snippets/blob/main/resource_logic.md

Axioms are used for parts that are unclear.

This the purpose of the resource logic, as far as I (paul@heliax.dev)
    understand.

# Creation of Kudo kind

Someone, __the originator__ can create a new Kudo kind. They do this by:

1. generating a public/private key pair.

2. Create a ;Resource; in a Transaction that creates a quantity of this new kind.

Qs.

1. How can you populate the ownerSig field? It is generated from the Resource, but is also part of the Resource.
   The signature is computed over everything apart from the signature. The signature is then added to the ownerSig field
   to complete the resource. The same applies to the originatorSig.

2. How does a user (say the owner) obtain the kudoLogic in order to participate in the Application?

3. What is the connectives check? --}
module Kudos.Logic;

import Anoma open;
import Stdlib.Prelude open;

{-
 # Make a new Kudo kind (kudos).
 1. Create Apriv, Apub keys
 2. Create a kudo resource*, as part of that they populate
 the originiatorSig field.

   concretely:
   1. Create a resource, r, populated with:
     * the kudo logic function
     * label: Apub
   2. Sign the (anomaKind r) with Apriv, populate the originatorSig field.

 # instantiation : A creates some quantity of this new kind (kudos) owned by A
 1. Insantiate a resource
 2. Populate owner field with Apub
 3. Populate quantity field with the number you want to create
 4. Populate other fields as usual
 -- 5. Populate newOwner field with "no-one identity"
 -- 6. Generate a signature over this resource using Apriv, populate ownerSig.
 7. Create a transaction with this resource as commitment.

 # A authorize consumption by B
 -- 1. set newOwner to Bpub on the "to be consumed resource"
 -- 2. Generate a signature over this resource using Apriv, populate ownerSig.

 # A transfers n kudos to B
 1. Consume n kudos that we own (concretely, the resource in instantiation) owner is Apub
 2. Create n kudos that are owned by B.
    1. populate owner with Bpub
    -- 2. Generate a signature over this resource using Apriv, populate ownerSig. --
    3. Populate other fields as usual
 3. Create a transaction with resource in 1. as nullifier and resource in 2.
    as commitment.
    A sign the list of nullifiers and commitments with Apriv, populate Transaction.extra field.


 * The logic function checks that the owner of created is equal to the newOwner of consumed.
   And there is an ownerSig on the consumed one.

 # B wants to use the n kudos
   They can create any transaction where they instantiate n kudos.
   Anoma checks that the resources are results of valid histories via proofs.
-}

--- The data stored on a Kudo resource
type KudoValue :=
  mkKudoValue {
    owner : PublicKey;
    -- ownerSig : Signature;
    originatorSig : Signature;
    -- nextOwner : PublicKey
  };

--- Check that the originator signed the ;Resource; kind.
checkValidOriginator (r : Resource) : Bool :=
  let
    -- TODO: Add support for kudo subtypes by adding extra
    -- data to the label.
    key : PublicKey := anomaDecode (Resource.label r);
    value : KudoValue := anomaDecode (Resource.data r);
  in anomaVerifyDetached
    {Nat}
    (KudoValue.originatorSig value)
    (anomaKind r)
    key;

--- Check that the ;Transaction; is valid for the Kudo application.
--- The self argument is the ;Resource; that defines this logic function.
kudoLogic (self : Resource) (tx : Transaction) : Bool :=
  let
    rs := partitionResources tx;
    isKudo (r : Resource) : Bool :=
      anomaEncode (Resource.logic self)
        == anomaEncode (Resource.logic r);
    consumedKudo :=
      filter isKudo (ResourcePartition.consumed rs);
    createdKudo := filter isKudo (ResourcePartition.created rs);
  in checkConsumedKudo consumedKudo
    && checkCreatedKudo createdKudo;

--- Run checks on consumed Kudo ;Resource;s
checkConsumedKudo (rs : List Resource) : Bool :=
  all (r in rs)
    checkValidOriginator r && checkAuthorizedConsumption r;

--- Run checks on created Kudo ;Resource;s
checkCreatedKudo (rs : List Resource) : Bool :=
  all (r in rs)
    checkValidOriginator r;
-- add a check that there is one resource with the same kind and nextOwner being consumed
-- corresponding to the kind and owner of the resource to be created

--- Check that the owner of the Kudo has authorized consumption.
checkAuthorizedConsumption (r : Resource) : Bool :=
  let
    value : KudoValue := anomaDecode (Resource.data r);
    valueNoOwnerSig : KudoValue :=
      value@KudoValue{ownerSig := 0};
    resourceNoOwnerSig : Resource :=
      r@Resource{data := anomaEncode valueNoOwnerSig};
  in anomaVerifyDetached
    (KudoValue.ownerSig value)
    resourceNoOwnerSig
    (KudoValue.owner value);
-- ownerSig get computed over everything including nextOwner PubKey
-- nextOwnerSig needs to be computed last

main : Resource -> Transaction -> Bool := kudoLogic;
