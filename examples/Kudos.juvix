--- Scale-Free Kudos
--- https://research.anoma.net/t/scale-free-kudos-brainstorming-thread/217
module Kudos;

import Anoma open;
import Stdlib.Prelude open;

syntax alias KudoLabelHash := Nat;

--- Get the ;PublicKey; associated with a ;KudoLabelHash;.
-- TODO: How does the resolution work?
-- Does it come from storage?
-- If so, how is it stored?
axiom resolveLabel : KudoLabelHash -> PublicKey;

type KudoValue :=
  mkKudoValue {
    owner : PublicKey;
    ownerSig : Signature;
    originatorSig : Signature
  };

type KudoExtraData := mkKudoExtraData {connectives : Bool};

--- Checks that the passed Resources have the same logic function.
checkLogic (r1 : Resource) (r2 : Resource) : Bool :=
  anomaEncode (Resource.logic r1)
    == anomaEncode (Resource.logic r2);

--- Check that the value contains a valid signature of the originator.
checkResourceIsKudo (r : Resource) : Bool :=
  let
    key : PublicKey := resolveLabel (Resource.label r);
    value : KudoValue := anomaDecode (Resource.data r);
  in anomaVerifyDetached
    {Nat}
    (KudoValue.originatorSig value)
    (anomaKind r)
    key;

--- Check that the owner of the Kudo has authorized consumption.
checkAuthorizedConsumption (r : Resource) : Bool :=
  let
    value : KudoValue := anomaDecode (Resource.data r);
  in anomaVerifyDetached
    (KudoValue.ownerSig value)
    r
    (KudoValue.owner value);

checkValidOriginator (r : Resource) : Bool :=
  let
    value : KudoValue := anomaDecode (Resource.data r);
    key : PublicKey := resolveLabel (Resource.label r);
  in anomaVerifyDetached
    (KudoValue.originatorSig value)
    r
    key;

checkConsumedResources
  (r : Resource) (rs : List Resource) : Bool :=
  all (ri in rs)
    not (checkLogic r ri)
      || checkResourceIsKudo ri
      && checkAuthorizedConsumption ri;

checkCreatedResources
  (r : Resource) (rs : List Resource) : Bool :=
  let
    logicHash : Nat := anomaEncode (Resource.logic r);
  in all (ro in rs)
       not (checkLogic r ro) || checkValidOriginator (ro);

-- TODO: What is connective validity
checkConnectives (tx : Transaction) : Bool :=
  KudoExtraData.connectives
    (anomaDecode (Transaction.extra tx));

kudoLogic (r : Resource) (tx : Transaction) : Bool :=
  let
    rs := partitionResources tx;
  in checkConsumedResources r (ResourcePartition.consumed rs)
    && checkCreatedResources r (ResourcePartition.created rs)
    && checkConnectives tx;
