module RawCounterTransaction;

import Anoma.Transaction open;
import Stdlib.Prelude open;
import Anoma.Extra open;

open Transaction;
open DeltaComponent;

-- Required for Demo only
import Anoma.Transaction as Demo;

privKey : Nat :=
  0xddd315c76991f8e058760cacdd19c21bf6a12c72bc229a60ad6aaa314fa07ac11662fc6e7829efcb0f4500827d49bb699af7b5475cef5220fd600ebbf9709a58;

pubKey : Nat :=
  0xddd315c76991f8e058760cacdd19c21bf6a12c72bc229a60ad6aaa314fa07ac1;

counterLogic (r : Resource) (tx : Transaction) : Bool :=
  length (commitments tx) == 1
    && length (nullifiers tx) == 1
    && case delta tx of {
         | [d] := sign d
         | _ := false
       };

mkCounter (n : Nat) : Resource :=
  Resource.mk@{
    logic := counterLogic;
    label := 0;
    quantity := n;
    data := 0;
    eph := false;
    npk := pubKey;
    nonce := 0;
    rseed := 0
  };

zeroedCounter : Resource := mkCounter 0;

incrementedCounter : Resource := mkCounter 1;

counterTransaction : Transaction :=
  Transaction.mk@{
    roots := [];
    commitments := [commitment incrementedCounter];
    nullifiers := [nullifier zeroedCounter privKey];
    proofs := [zeroedCounter; incrementedCounter];
    delta :=
      [ DeltaComponent.mk@{
        denom := anomaKind incrementedCounter;
        sign := true;
        amount := 1
      }
      ];
    extra := 0;
    preference := 0
  };

main : Transaction := counterTransaction;
