--- Utility functions for the Anoma system
module Anoma.Extra;

import Anoma.Types open;
import Stdlib.Prelude open;
import Anoma.System open;

--- Resources partitioned into those that the transaction consumes and those
--- that the transaction creates
type ResourcePartition :=
  mkResources {
    consumed : List Resource;
    created : List Resource
  };

--- Partition the ;Resource;s of a ;Transaction; into those that are consumed
--- and those that are created
-- TODO: Most logic functions will need to do this to make assertions about
-- state changes. Why aren't input and output resources already partitioned on
-- the Resoruce?
axiom partitionResources : Transaction -> ResourcePartition;

--- The kind of a ;Resource;.
--- This is some combination of `anomaEncode (Resource.logic r)` and
--- `anomaEncode (Resource.label r)` defined by Anoma.
anomaKind (r : Resource) : Nat :=
  anomaEncode (Resource.logic r , Resource.label r);

--- The header to use in a nullifier cell
--- https://github.com/anoma/anoma/blob/ea25f88cea52226d77c8392ae16bbfc5a7ffccee/lib/anoma/resource.ex#L36
nullifierHeader : String := "annullo";

--- The nullifier of the given resource.
--- https://github.com/anoma/anoma/blob/ea25f88cea52226d77c8392ae16bbfc5a7ffccee/lib/anoma/resource.ex#L66
nullifier (r : Resource) (secretKey : Nat) : Nat :=
  anomaSign (nullifierHeader, r) secretKey;

-- The header to use in a commitment cell
commitmentHeader : String := "committo";

--- A commitment to the given resource
--- https://github.com/anoma/anoma/blob/ea25f88cea52226d77c8392ae16bbfc5a7ffccee/lib/anoma/resource.ex#L55
commitment (r : Resource) : Nat :=
  anomaEncode (commitmentHeader, r);
