--- Functions that are or will be provided by the Anoma system.
module Anoma.System;

import Stdlib.Prelude open;

syntax alias PublicKey := Nat;
syntax alias PrivateKey := Nat;

syntax alias Signature := Nat;
-- The first part is the original message encoded as a `Nat`, the last part is the 64 bytes long signature.
syntax alias SignedMessage := Nat;

--- Get a value by key from Anoma.
builtin anoma-get
axiom anomaGet : {Value Key : Type} -> Key -> Value;

--- Verifies a signature against a provided message and public key.
builtin anoma-verify-detached
axiom anomaVerifyDetached : {Message : Type}
  -- | The signature to verify.
  -> Signature
  -- | The message.
  -> Message
  -- | The expected public key of the signer.
  -> PublicKey
  -- | The verification result.
  -> Bool;

--- Signs a message with a private key and returns a signed message.
builtin anoma-sign
axiom anomaSign : {Message : Type}
  -- | The message to sign.
  -> Message
  -- | The signing private key.
  -> PrivateKey
  -- | The resulting signed message.
  -> SignedMessage;

--- Verifies a signed message against the public key of the signer and returns the original message.
-- TODO: How does the function behave on mismatch?
builtin anoma-verify
axiom anomaVerify : {Message : Type}
  -- | The signed message to be verified.
  -> SignedMessage
  -- | The expected public key of the signer.
  -> PublicKey
  -- | The original message.
  -> Message;

--- Signs a message with a private key and returns the signature.
builtin anoma-sign-detached
axiom anomaSignDetached : {Message : Type}
  -- | The message to sign.
  -> Message
  -- | The signing private key.
  -> PrivateKey
  -- The resulting signature
  -> Signature;

--- Encodes a value into a natural number.
builtin anoma-encode
axiom anomaEncode : {Value : Type}
  -- | The value to encode.
  -> Value
  -- | The encoded natural number.
  -> Nat;

--- Decodes a value from a natural number.
builtin anoma-decode
axiom anomaDecode : {Value : Type}
  -- | The natural number to decode .
  -> Nat
  -- | The decoded value.
  -> Value;
